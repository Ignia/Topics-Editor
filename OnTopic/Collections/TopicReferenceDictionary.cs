/*==============================================================================================================================
| Author        Ignia, LLC
| Client        Ignia, LLC
| Project       Topics Library
\=============================================================================================================================*/
using System;
using System.Collections;
using System.Collections.Generic;
using OnTopic.Internal.Diagnostics;

namespace OnTopic.Collections {

  /*============================================================================================================================
  | CLASS: TOPIC REFERENCE DICTIONARY
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Represents a collection of <see cref="Topic"/> objects associated with particular reference keys.
  /// </summary>
  public class TopicReferenceDictionary : IDictionary<string, Topic> {

    /*==========================================================================================================================
    | PRIVATE VARIABLES
    \-------------------------------------------------------------------------------------------------------------------------*/
    readonly                    Topic                           _parent;
    readonly                    IDictionary<string, Topic>      _storage;

    /*==========================================================================================================================
    | CONSTRUCTOR
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Initializes a new instance of the <see cref="TopicReferenceDictionary"/>.
    /// </summary>
    public TopicReferenceDictionary(Topic parent) {

      /*------------------------------------------------------------------------------------------------------------------------
      | Validate parameters
      \-----------------------------------------------------------------------------------------------------------------------*/
      Contract.Requires(parent, nameof(parent));

      /*------------------------------------------------------------------------------------------------------------------------
      | Initialize backing fields
      \-----------------------------------------------------------------------------------------------------------------------*/
      _parent = parent;
      _storage = new Dictionary<string, Topic>();

    }

    /*==========================================================================================================================
    | COUNT
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public int Count => _storage.Count;

    /*==========================================================================================================================
    | IsReadOnly
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public bool IsReadOnly => false;

    /*==========================================================================================================================
    | ITEM
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public Topic this[string referenceKey] {
      get => _storage[referenceKey];
      set {
        _storage[referenceKey] = value;
      }
    }

    /*==========================================================================================================================
    | KEYS
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public ICollection<string> Keys => _storage.Keys;

    /*==========================================================================================================================
    | VALUES
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public ICollection<Topic> Values => _storage.Values;

    /*==========================================================================================================================
    | ADD
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    void ICollection<KeyValuePair<string, Topic>>.Add(KeyValuePair<string, Topic> item) {

      /*------------------------------------------------------------------------------------------------------------------------
      | Validate parameters
      \-----------------------------------------------------------------------------------------------------------------------*/
      Contract.Requires(item, nameof(item));

      TopicFactory.ValidateKey(item.Key);

      /*------------------------------------------------------------------------------------------------------------------------
      | Add item
      \-----------------------------------------------------------------------------------------------------------------------*/
      _storage.Add(item);

    }

    /// <inheritdoc/>
    public void Add(string key, Topic value) {

      /*------------------------------------------------------------------------------------------------------------------------
      | Validate parameters
      \-----------------------------------------------------------------------------------------------------------------------*/
      Contract.Requires(key, nameof(key));
      Contract.Requires(value, nameof(value));

      /*------------------------------------------------------------------------------------------------------------------------
      | Add item
      \-----------------------------------------------------------------------------------------------------------------------*/
      _storage.Add(new(key, value));

    }

    /*==========================================================================================================================
    | CLEAR
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public void Clear() {

      /*------------------------------------------------------------------------------------------------------------------------
      | Call base method
      \-----------------------------------------------------------------------------------------------------------------------*/
      _storage.Clear();

    }

    /*==========================================================================================================================
    | CONTAINS
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public bool Contains(KeyValuePair<string, Topic> item) => _storage.Contains(item);

    /*==========================================================================================================================
    | CONTAINS KEY
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public bool ContainsKey(string key) => _storage.ContainsKey(key);

    /*==========================================================================================================================
    | COPY TO
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public void CopyTo(KeyValuePair<string, Topic>[] array, int arrayIndex) => _storage.CopyTo(array, arrayIndex);

    /*==========================================================================================================================
    | GET ENUMERATOR
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    IEnumerator IEnumerable.GetEnumerator() => _storage.GetEnumerator();

    /// <inheritdoc/>
    public IEnumerator<KeyValuePair<string, Topic>> GetEnumerator() => _storage.GetEnumerator();

    /*==========================================================================================================================
    | REMOVE
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    bool ICollection<KeyValuePair<string, Topic>>.Remove(KeyValuePair<string, Topic> item) =>
      Contains(item) && Remove(item.Key);

    /// <inheritdoc/>
    public bool Remove(string key) {

      /*------------------------------------------------------------------------------------------------------------------------
      | Validate parameters
      \-----------------------------------------------------------------------------------------------------------------------*/
      Contract.Requires(key, nameof(key));

      /*------------------------------------------------------------------------------------------------------------------------
      | Call base method
      \-----------------------------------------------------------------------------------------------------------------------*/
      return _storage.Remove(key);

    }

    /*==========================================================================================================================
    | TRY/GET VALUE
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <inheritdoc/>
    public bool TryGetValue(string key, out Topic value) => _storage.TryGetValue(key, out value);

  } //Class
} //Namespace