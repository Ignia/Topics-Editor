/*==============================================================================================================================
| Author      Jeremy Caney, Ignia LLC
| Client      Ignia
| Project     Topics Editor
|
| Purpose     A concrete provider that allows the topics system to work independent of a third-party system.
|
\=============================================================================================================================*/
using System;

namespace Ignia.Topics.Providers {

  /*===========================================================================================================================
  | CLASS: COMMUNITY SERVER TOPIC MAPPING PROVIDER
  >============================================================================================================================
  | Defines a topic mapping provider for the community server platform
  \--------------------------------------------------------------------------------------------------------------------------*/
  public class NullTopicMappingProvider : TopicMappingProviderBase {

  /*=========================================================================================================================
  | METHOD: DELETE EVENT HANDLER
  >==========================================================================================================================
  | Definition of the DeleteEventHandler override from the base.
  \------------------------------------------------------------------------------------------------------------------------*/
    public override void DeleteEventHandler(object sender, DeleteEventArgs args) {

    /*-----------------------------------------------------------------------------------------------------------------------
    | VALIDATE PARAMETERS
    \----------------------------------------------------------------------------------------------------------------------*/
      if (args == null) throw new ArgumentNullException("args");

    /*-----------------------------------------------------------------------------------------------------------------------
    | RELAY TO METHOD
    \----------------------------------------------------------------------------------------------------------------------*/
      Delete(args.Topic.UniqueKey);

    }

  /*=========================================================================================================================
  | METHOD: DELETE
  >==========================================================================================================================
  | Core delete method, which permits deleting based on a string
  \------------------------------------------------------------------------------------------------------------------------*/
    public void Delete(string originalTag) {
    //Not Implemented
    }

  /*=========================================================================================================================
  | METHOD: MOVE EVENT HANDLER
  >==========================================================================================================================
  | Definition of the RenameEventHandler override from the base.
  \------------------------------------------------------------------------------------------------------------------------*/
    public override void MoveEventHandler(object sender, MoveEventArgs args) {

    /*-----------------------------------------------------------------------------------------------------------------------
    | VALIDATE PARAMETERS
    \----------------------------------------------------------------------------------------------------------------------*/
      if (args == null) throw new ArgumentNullException("args");

    /*-----------------------------------------------------------------------------------------------------------------------
    | SET ARGUMENTS
    \----------------------------------------------------------------------------------------------------------------------*/
      string originalTag = args.Topic.UniqueKey;
      string newTag      = args.Target.UniqueKey + ":" + args.Topic.Key;

    /*-----------------------------------------------------------------------------------------------------------------------
    | RELAY TO METHOD
    \----------------------------------------------------------------------------------------------------------------------*/
      Move(originalTag, newTag);

    }

  /*=========================================================================================================================
  | METHOD: MOVE
  >==========================================================================================================================
  | Core move method, which permits moving based on a string
  \------------------------------------------------------------------------------------------------------------------------*/
    public void Move(string originalTag, string newTag) {
      Rename(originalTag, newTag);
    }

  /*=========================================================================================================================
  | METHOD: RENAME EVENT HANDLER
  >==========================================================================================================================
  | Definition of the RenameEventHandler override from the base.
  \------------------------------------------------------------------------------------------------------------------------*/
    public override void RenameEventHandler(object sender, RenameEventArgs args) {

    /*-----------------------------------------------------------------------------------------------------------------------
    | VALIDATE PARAMETERS
    \----------------------------------------------------------------------------------------------------------------------*/
      if (args == null) throw new ArgumentNullException("args");

    /*-----------------------------------------------------------------------------------------------------------------------
    | SET ARGUMENTS
    \----------------------------------------------------------------------------------------------------------------------*/
      string tagRoot     = "";

      if (args.Topic.UniqueKey.LastIndexOf(":", StringComparison.Ordinal) >= 0) {
        tagRoot = args.Topic.UniqueKey.Substring(0, args.Topic.UniqueKey.LastIndexOf(":", StringComparison.Ordinal));
      }

      string originalTag = tagRoot + ":" + args.Topic.OriginalKey;
      string newTag      = tagRoot + ":" + args.Topic.Key;

    /*-----------------------------------------------------------------------------------------------------------------------
    | RELAY TO METHOD
    \----------------------------------------------------------------------------------------------------------------------*/
      Rename(originalTag, newTag);

    }

  /*=========================================================================================================================
  | METHOD: RENAME
  >==========================================================================================================================
  | Core rename method, which permits renaming based on a string
  \------------------------------------------------------------------------------------------------------------------------*/
    public void Rename(string originalTag, string newTag) {
    //Not implemented
    }

  } //Class

} //Namespace

